# This is an example JAML file, used for basic demonstration of JAMLs capabilities and syntax.
# JAML is a simple-yet-powerful formatting language, used primarily for configuration files - much like TOML or YAML.
# It supports a variety of data types, including strings, integers, floats, booleans, arrays and maps.
# However - unlike these languages, it offers a built-in templating engine that is environment and language agnostic.
# This allows for templating, loops and conditional statements to be used directly in the configuration file.

#---------------------------------------------------------------------------------------------------------------------#

# In JAML files, comments are lines that start with a hash symbol (#).
# This is an example of a comment. It can appear on its own or as part of a line.
# Multiline comments are not supported in JAML, but can be achieved by using multiple single-line comments.

# Variables are used to store data that can be referenced and manipulated in a program. Whitespace in JAML is ignored.
# Variable assignment is done using the equals sign (=), with the variable name on the left and the value on the right.

#---------------------------------------------------------------------------------------------------------------------#

## Simple type variable assignments ##


character_variable = 'a'  # character assignment - note the single quotes
# characters can be any single character, including letters, numbers, symbols and whitespace
# e.g. 'a', '1', '!', ' ', '\n', '\t', etc.

string_variable = "Hello, World!"  # string assignment - note the double quotes
# strings can be any sequence of characters, including letters, numbers, symbols and whitespace
# e.g. "Hello, World!", "123", "!", " ", "Hello, \nWorld!", etc.

integer_variable = 5  # integer assignment - note the lack of a decimal point
# integers can be any whole number, positive or negative, including zero
# e.g. 1, 2, 3, 0, -1, -2, -3, etc.

float_variable = 5.0  # float assignment - note the floating point
# floats can be any number, positive or negative, including zero, with a decimal point
# e.g. 1.0, 2.0, 3.0, 0.0, -1.0, -2.0, -3.0, etc.

complex_variable = 5 + 3i  # complex assignment - note the + syntax with the 'i' suffix
# complex numbers can be any number, positive or negative, including zero, with an imaginary component
# e.g. 1 + 2i, 3 + 4i, 0 + 1i, -1 + 2i, -3 - 4i, etc.

boolean_variable = True  # boolean assignment - note the capitalisation
# booleans can be either True or False, and are used to represent logical values
# True is equivalent to 1, and False is equivalent to 0
# case sensitivity is important - true, false, TRUE and FALSE are not valid booleans

null_variable = Null  # null assignment - note the capitalisation
# Null is used to represent the absence of a value, and is equivalent to None in Python or null in JavaScript
# case sensitivity is important - null, NULL, None and none are not valid nulls

#---------------------------------------------------------------------------------------------------------------------#

## Compound type variable assignments ##


array_variable = [False, True, 2, 3.0, "four", 5]  # array assignment - note the square brackets
# arrays are ordered collections of elements, which can be of any type supported by JAML
# arrays in JAML are heterogeneous - elements can be of different types
# arrays can contain any combination of strings, integers, floats, booleans, arrays and maps
# ["one", 2, 3.0, True, [4, 5], ["six", 7], ("eight": 9, 10: "ten")] is a valid array

# multidimensional (or "nested") arrays are supported, like so: [1, 2, [3, 4], 5]
# nested arrays can be of any depth, and can contain arrays of different lengths and types
# [1, 2, ["one", "two"], [5.0]] is a valid array, as is [1, 2, [3.0, 4.0, [True, False]], 7]

# arrays can also be empty, like so: []

# arrays can be written on multiple lines, like so (indentation is optional):
# array_variable = [
#    "one",
#    2,
#    3.0,
#    True,
#    [
#       4,
#       5
#    ],
#    [
#       "six",
#       7
#    ],
#    (
#       "eight": 9,
#       10: "ten"
#    )
# ]


map_variable = ("key1": "value1", 2: "value2", 3.0: 3.0, '4': True) # map assignment - note the round brackets
# maps in JAML are key-value pairs - each key is unique, and each value is associated with a key
# keys can be strings, integers, floats or booleans, but not arrays or maps
# values can be any type, including strings, integers, floats, booleans, arrays and maps

# nested maps are supported, like so: ("key": ("nested_key": "value"))
# nested maps can be of any depth, and can contain maps of different lengths and types
# ("key1": ("nested_key1": "value1", "nested_key2": "value2"), "key2": ("nested_key3": "value3")) is a valid map

# maps can also be empty, like so: ()

# maps can be written on multiple lines, like so (indentation is optional):
# map_variable = (
#   "key1": "value1",
#   "key2": "value2",
#   "key3": 3.0,
#   "key4": True
# )

#---------------------------------------------------------------------------------------------------------------------#

## Templating ##

# JAML supports templating, which allows for the substitution of placeholders into values, based on context.
# Variables that contain placeholders are called templates, and can be used to generate dynamic content.
# The values to substitute into placeholders are called parameters, and are passed to the template at runtime.
# Placeholders are denoted by angle brackets with the parameter name, like so: <some_parameter>
# Therefore, anything within angle brackets is considered a placeholder, and will be replaced with a parameter value.
# Placeholders can be used in any data type supported by JAML, and parameters can be of any type supported by JAML.

template_string_variable = "Hello, <name>!"  # template string assignment - note the angle brackets
template_integer_variable = <number> + 5  # template integer assignment
template_float_variable = <number> + 5.0  # template float assignment
template_complex_variable = <real> + <imaginary>i  # template complex assignment
template_boolean_variable = <flag>  # template boolean assignment

template_array_variable = [<one>, <two>, <three>, <four>, <five>]  # template array assignment
# or alternatively:
template_array_variable = <array>

template_map_variable = ("key1": <value1>, "key2": <value2>, "key3": <value3>)  # template map assignment
# or alternatively:
template_map_variable = <map>

#---------------------------------------------------------------------------------------------------------------------#

## Loops ##

# JAML supports loops, which allow for the iteration over arrays and maps, or for the generation of dynamic content.
# Loops can be used to generate repetitive content, or to iterate over data structures and perform operations on them.